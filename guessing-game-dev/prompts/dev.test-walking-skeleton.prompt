# Task

1. 我現在想要開始撰寫自動化單元測試，需要你針對我指定的測試環境，來佈置一個 Walking skeleton (最小可行的基礎建設)。

2. 此 Walking skeleton 涵蓋底下：
    a. 已配置測試套件依賴
    b. 撰寫一個最簡單的 "Hello-World" Given / When / Then 單元測試程式碼作為最小測試可行的驗證：
        - 使用類別 HelloWorldService 作為範例測試的目標測試類別
        - 測試的目標函數為 greet(name: string): string 傳入一個字串
        - 撰寫的 End to End 測試程式碼的 given / when / then 為：
            ```gherkin
            Given my name is "Johnny"
            When someone is greeting me
            Then he says "Hello world 'Johnny'!" to me
            ```
        - 請使用 End to end 測試的程式語法來實作上述 given / when / then 測試程式碼，並使用註解來區隔 given / when / then。
            - 請注意，務必使用 MockMvc 來呼叫 API Call 做 e2e test
    c. 實作 HelloWorldController -> HelloWorldService 的 greet 函數 -> 此函數中會透過 HelloWorldRepository 來儲存一筆新的 greet 訊息。
        - HelloWorldController, HelloWorldService 和 HelloWorldRepository 都被放在 src/main/example package 中。

    ## 測試程式碼範例
    
    ```NestJs
        describe('HelloWorld End-to-End Test', () => {
            let app: INestApplication;

            beforeAll(async () => {
                const moduleFixture: TestingModule = await Test.createTestingModule({
                imports: [AppModule], // 導入整個應用模組
                }).compile();

                app = moduleFixture.createNestApplication();
                await app.init();
            });

            it('should return greeting message with name parameter', () => {
                const name = 'Johnny';

                return request(app.getHttpServer())
                .get('/api/hello')
                .query({ name }) // 傳遞 query 參數
                .expect(200)
                .expect(`Hello world '${name}'!`);
            });

            afterAll(async () => {
                await app.close();
            });
        });
    ```

# Tech Stack Configuration
1. Language Enviornment: NodeJs
2. Web Framework: NestJs
3. Test library:
    - Jest
