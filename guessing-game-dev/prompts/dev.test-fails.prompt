# Task
針對這個樣板的測試方法，嚴格遵照底下的「Steps」，嚴格使用「Technical Practice」中所指定技術，實作後端的 End to end 單元測試。

# Context
1. API Specs: analysis/api/api.yml

# Steps
1. 取消此測試方法的註解
2. 遵照「Rules: Given / When / Then」中所述規則，使用 Given / when / then 區隔的語意撰寫單元測試。
3. 撰寫完單元測試之後，要執行測試確定這個測試以合理的原因「失敗」，好比說不是因為測試環境失敗而失敗，而是因為方法為實作導致的「值的不同」的失敗。

# Technical Practice
1. 使用 MockMvc 來執行所有後端 End to End API Call。
2. 測試一定要透過 End to end 從 API Call 下去做黑盒測試，並且使用 H2 做嵌入式資料庫，因此測試路徑會經過 MockMvc -> Controller -> Service -> Repository -> H2 DB。不可以在測試類別中直接依賴注入 Service。
3. 一定要參考 API Spec，針對測試的每一個 Feature 都會有其直接對應的 API Endpoint。

## Rules: Given / When / Then

- 在撰寫過程中，如果需要定義一些類別、property 或是方法，可以先定義好，但絕對不實作內部程式，畢竟在這一步驟中，我們只想先寫出測試程式碼，不該實作業務邏輯，因此，定義完必要的方法後，可以使用 TODO 註解將方法留空。
- 要嚴格區分一下 Given 和 When 兩者語意：
    - 單純「宣告變數」的程式碼不要歸類在 Given 區塊中，而是直接合併在 When 中，舉例：
        1. 很多時候你可能會想寫出底下這種 Given
            ```java
            // Given
            String userId = "johnny"; // 給定我的 ID
            int productId = "non-existingProductId"; // 給定我想買的 product id 不存在⋯⋯
            
            // When
            MvcResult result = mockMvc.perform(post("/api/checkout")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("{\"userId\":\"" + userId + "\",\"productId\":\"" + productId + "\"}"))
                    .andReturn();
            ...
            ```
        2. 但是這一段 Given 中其實除了宣告變數之外，並沒有真的透過任何操作來建構或是改變系統狀態，只是單純宣告變數而已。這時候我希望你能直接將 Given 合併進去 When 中，讓語法更簡潔：
            ```java
            // When
            String userId = "johnny"; // 給定我的 ID
            int productId = "non-existingProductId"; // 給定我想買的 product id 不存在⋯⋯
            MvcResult result = mockMvc.perform(post("/api/checkout")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("{\"userId\":\"" + userId + "\",\"productId\":\"" + productId + "\"}"))
                    .andReturn();
            ...
            ```
            其中可以看見，service 那一段描述就不必分類成 Given，就只是單純初始化而已。
            如果有發現重複的初始化程式，放在測試類別的 @BeforeEach 區塊中。
        3. 在撰寫 When 和 Then 時，必須要參考該對應 API Endpoint 的 Request 參數（在 When 中作為參數） / Response 參數（在 Then 中驗證）。
- 一個測試中，應該只能有一個 "When"，如果有多個 When，則應該把前面的 When 都轉成 Given，只留下一個 When 作為測試標的。
    - 舉例：
        - 不好的寫法：多個 When
            ```java
            String userId = "johnny";
            // When
            userService.register(userId); // 這應該是 Given
            // When
            MvcResult result = mockMvc.perform(post("/api/orders")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("{\"userId\":\"" + userId + "\",\"productId\":\"product123\"}"))
                    .andReturn(); // 真正要測試的行為
            // Then
            assertNotNull(order);
            ```
            
        - 好的寫法：只有一個 When：
            ```java
            // Given
            String userId = "johnny";
            userService.register(userId); // 先註冊用戶作為前置條件
            // When
            MvcResult result = mockMvc.perform(post("/api/orders")
                    .contentType(MediaType.APPLICATION_JSON)
                    .content("{\"userId\":\"" + userId + "\",\"productId\":\"product123\"}"))
                    .andReturn(); // 真正要測試的行為
            // Then
            assertNotNull(order);
            ```